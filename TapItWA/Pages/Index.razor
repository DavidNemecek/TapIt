@inherits LayoutComponentBase
@inject IJSRuntime jsRuntime

@if (_screen == null)
{
    <p><em>Loading</em></p>
}
else if (!_watch.IsRunning)
{
    <div>
        Gratuliere! <br />
        Benötigte Zeit: @_watch.Elapsed.ToString()<br />
        Gesammten Taps: @_totalCircles <br />
        Durchschnittszeit pro Tap: @(_watch.Elapsed/_totalCircles)
    </div>
}
else
{
    <svg height="@_screen.Height" width="@_screen.Width">

        @foreach (var circle in _screen.Circles)
        {
            <circle cx="@circle.X" cy="@circle.Y" r="@circle.Size" fill="@circle.Fill" @onclick="() => CircleClicked(circle)" />
        }
    </svg>
}

@code
{
    readonly Stopwatch _watch = new Stopwatch();
    Screen _screen;
    Timer timer;
    int _totalCircles = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //To not render it all over again and again -> do it just the first time
        if (!firstRender) return;

        //Get Dimensions from the Screen
        _screen = await jsRuntime.InvokeAsync<Screen>("getDimensions");

        //After X seconds should a new cirlce be added
        timer = new Timer((a) =>
        {
            _screen.Circles.Add(Circle.RandomCircleGenerator(_screen));
            InvokeAsync(StateHasChanged);
        });

        timer.Change(1000, 1000);

        //X cirlces added for start
        for (int i = 0; i < new Random().Next(5, 15); i++)
        {
            _screen.Circles.Add(Circle.RandomCircleGenerator(_screen));
        }

        //Start Stopwatch
        _watch.Start();
        StateHasChanged();
    }

    private void CircleClicked(Circle circle)
    {
        //Remove Circle from Circle List
        _screen.Circles.Remove(circle);
        _totalCircles += 1;

        //If all Circles are tapped -> game is over
        if (_screen.Circles.Count == 0)
        {
            _watch.Stop();
        }
    }
}